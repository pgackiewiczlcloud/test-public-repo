AWSTemplateFormatVersion: 2010-09-09
Description: "A custom resource template"

Parameters:
  Sleep:
    Type: Number
    Default: 30
    MinValue: 15

Resources:

  CustomResourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: LambdaCustomResourceRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}*"

  CustomResource:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import os
          import json
          import logging
          import urllib.request
          import boto3
          import time

          logger = logging.getLogger()
          logger.setLevel(os.getenv('LOG_LEVEL', 'DEBUG'))

          # override boto3 logging configuration
          logging.getLogger('boto3').setLevel(logging.ERROR)
          logging.getLogger('boto3').propagate = False
          logging.getLogger('botocore').setLevel(logging.ERROR)
          logging.getLogger('botocore').propagate = False

          def signal_cf_stack(event, context, response_status, response_data, resource_id):
              response_body = {
                  'Status': response_status,
                  'Reason': 'See the details in CloudWatch Log Stream: {}'.format(context.log_stream_name),
                  'PhysicalResourceId': resource_id,
                  'StackId': event['StackId'],
                  'RequestId': event['RequestId'],
                  'LogicalResourceId': event['LogicalResourceId'],
                  'Data': response_data
              }
              logger.info('Sending \'{}\' response to the CF stack...'.format(response_status))
              logger.info('Response body:\n{}'.format(json.dumps(response_body, indent=4)))

              try:
                  req = urllib.request.Request(event['ResponseURL'], data=json.dumps(response_body).encode(), method='PUT')
                  response = urllib.request.urlopen(req)
                  if response.status != 200:
                      logger.error(response.reason)
                      raise Exception('Received non 200 response while sending response to CF stack.')

                  return

              except Exception as e:
                  logger.error(e)

                  raise

          def lambda_handler(event, context):
            logger.info('Event data: {}'.format(json.dumps(event, indent=4)))

            response = {}
            response_data = {}
            response_status = 'SUCCESS'

            if event['ResourceType'] == 'Custom::CustomResourceEvent':
                if event['RequestType'] == 'Delete':
                    response_status = 'SUCCESS'
                elif event['RequestType'] in [ 'Create', 'Update' ]:
                    try:
                      response_status = 'SUCCESS'
                      time.sleep(int(event['ResourceProperties']['Sleep']))
                    except Exception as e:
                      response_status = 'FAILED'
                      logger.warn("Error: {}".format(e))

            signal_cf_stack(event, context, response_status, response_data, resource_id="noresource")

      Description: A custom lambda
      Environment:
        Variables:
          LOG_LEVEL: DEBUG
      Handler: index.lambda_handler
      Role: !GetAtt CustomResourceRole.Arn
      Runtime: python3.8
      Timeout: 900

  CustomResourceEvent:
    DependsOn: CustomResource
    Type: Custom::CustomResourceEvent
    Properties:
      StackName: !Ref AWS::StackName
      Sleep: !Ref Sleep
      ServiceToken: !GetAtt CustomResource.Arn

Outputs:
  CustomResourceRole:
    Value: !Ref CustomResourceRole
